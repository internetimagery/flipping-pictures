// Generated by CoffeeScript 1.9.1
"use strict";
var Video,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Video = (function() {
  Video.prototype.vendor = "";

  Video.prototype.videoDuration = 0;

  Video.prototype.aspectRatio = 0;

  function Video(source) {
    this.source = source;
    this._resizeDynamic = bind(this._resizeDynamic, this);
    this.load = bind(this.load, this);
    this.update = false;
  }

  Video.prototype.load = function(url) {
    var dailymotion, reg, videoID, vimeo, vimeoPlayer, youtube;
    youtube = url.match(/http[s]?:\/\/(?:[^\.]+\.)*(?:youtube\.com\/(?:v\/|watch\?(?:.*?\&)?v=|embed\/)|youtu.be\/)([\w\-\_]+)/i);
    if ((youtube != null) && youtube[1].length === 11) {
      this.vendor = "youtube";
      videoID = youtube[1];
    }
    vimeo = url.match(/(?:https?:\/\/(?:www\.)?)?vimeo.com\/(?:channels\/|groups\/([^\/]*)\/videos\/|album\/(\d+)\/video\/|)(\d+)(?:$|\/|\?)/);
    if (vimeo != null) {
      this.vendor = "vimeo";
      videoID = vimeo[3];
      vimeoPlayer = null;
    }
    reg = /(?:dailymotion\.com(?:\/video|\/hub)|dai\.ly)\/([0-9a-z]+)(?:[\-_0-9a-zA-Z]+#video=([a-z0-9]+))?/g;
    dailymotion = reg.exec(url);
    if (dailymotion != null) {
      this.vendor = "dailymotion";
      if (dailymotion[2]) {
        videoID = dailymotion[2];
      } else {
        videoID = dailymotion[1];
      }
    }
    if (this.vendor) {
      if (this.update) {
        return $.ovoplayer.update({
          type: this.vendor,
          code: videoID
        });
      } else {
        this.update = true;
        return $.ovoplayer.init({
          id: this.source,
          type: this.vendor,
          code: videoID,
          debug: true,
          callback: function(player) {
            return console.log("Updated video.");
          }
        });
      }
    }
  };

  Video.prototype.play = function() {
    return $.ovoplayer.play();
  };

  Video.prototype.seek = function(time, pause) {
    return $.ovoplayer.seek(time, function(p, o) {
      if (pause) {
        return $.ovoplayer.pause();
      }
    });
  };

  Video.prototype.first = function() {
    return $.ovoplayer.first();
  };

  Video.prototype.last = function() {
    return $.ovoplayer.last();
  };

  Video.prototype.pause = function() {
    return $.ovoplayer.pause();
  };

  Video.prototype.next = function() {
    return $.ovoplayer.next();
  };

  Video.prototype.previous = function() {
    return $.ovoplayer.previous();
  };

  Video.prototype.repeat = function(toggle) {
    return $.ovoplayer.repeat(toggle);
  };

  Video.prototype.repeatAll = function(toggle) {
    return $.ovoplayer.repeatAll(toggle);
  };

  Video.prototype._update = function(vendor, videoID) {
    return $.ovoplayer.update({
      type: vendor,
      code: videoID
    });
  };

  Video.prototype._resizeDynamic = function() {
    var height;
    height = this.player.width() * this.aspectRatio;
    this.playerFrame.width(this.player.width());
    this.playerFrame.height(height);
    return this.player.height(height);
  };

  Video.prototype._parseURL = function(url) {
    var dom;
    dom = document.createElement("a");
    dom.href = url;
    return {
      source: url,
      scheme: dom.protocol.substr(0, dom.protocol.indexOf(":")),
      host: dom.hostname,
      port: dom.port,
      path: dom.pathname.match(/\/?(.*)/)[1],
      query: dom.search.substr(dom.search.indexOf("?") + 1),
      hash: dom.hash.substr(dom.hash.indexOf("#"))
    };
  };

  return Video;

})();
