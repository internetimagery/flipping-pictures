// Generated by CoffeeScript 1.9.1
var Slider,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Slider = (function() {
  Slider.prototype.sliderLocation = {};

  Slider.prototype.videoDuration = 0;

  Slider.prototype.dragHandles = "<div class='grip'></div>";

  Slider.prototype.colData = {};

  Slider.prototype.events = {
    "scrub": [],
    "update": []
  };

  function Slider(slider, colData) {
    var col, id, parent, ref, sliderInternal;
    this.colData = colData;
    this._deactivateSlider = bind(this._deactivateSlider, this);
    this._activateSlider = bind(this._activateSlider, this);
    this._uuid = bind(this._uuid, this);
    this.removeCol = bind(this.removeCol, this);
    this.splitCol = bind(this.splitCol, this);
    this.addCol = bind(this.addCol, this);
    this._updateData = bind(this._updateData, this);
    this._scrubVideo = bind(this._scrubVideo, this);
    this.addEvent = bind(this.addEvent, this);
    if (!this.colData) {
      id = this._uuid();
      this.colData[id] = {
        CLASS: "default",
        CSS: {
          background: "grey"
        },
        CONTENT: "This is a default column",
        RANGE: [0, 1]
      };
    }
    this.slider = $("<table><tr></tr></table>").appendTo($(slider));
    sliderInternal = this.slider.find("tr");
    this.sliderLocation = this.slider.offset();
    this.sliderLocation.width = this.slider.width();
    parent = sliderInternal;
    ref = this.colData;
    for (id in ref) {
      col = ref[id];
      parent = this.addCol(parent, col, id);
    }
    this._activateSlider();
  }

  Slider.prototype.addEvent = function(name, callback) {
    if (_.isFunction(callback)) {
      return this.events[name].push(callback);
    }
  };

  Slider.prototype._scrubVideo = function(e) {
    var i, len, percent, ref, results, run;
    percent = (e.pageX - this.sliderLocation.left) / this.sliderLocation.width;
    if (percent > 1) {
      percent = 1;
    }
    if (percent < 0) {
      percent = 0;
    }
    ref = this.events["scrub"];
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      run = ref[i];
      results.push(run(percent));
    }
    return results;
  };

  Slider.prototype._updateData = function(e) {
    var i, len, ref, results, run;
    this.slider.find("td").each((function(_this) {
      return function(index, el) {
        var end, id, start;
        id = $(el).attr("id");
        start = $(el).offset().left - _this.sliderLocation.left;
        end = ($(el).width() + start) / _this.sliderLocation.width;
        if (start) {
          start = start / _this.sliderLocation.width;
        }
        if (start < 0) {
          start = 0;
        }
        if (end > 1) {
          end = 1;
        }
        return _this.colData[id].RANGE = [start, end];
      };
    })(this));
    ref = this.events["update"];
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      run = ref[i];
      results.push(run(this.colData));
    }
    return results;
  };

  Slider.prototype.addCol = function(parent, data, id) {
    var column, newCol;
    column = $("<td></td>").addClass(data.CLASS).css(data.CSS).html(data.CONTENT).attr("id", id).width((data.RANGE[1] - data.RANGE[0]) * this.sliderLocation.width);
    if (parent.tagName === "TD" || parent[0].tagName === "TD") {
      $(parent).after(column);
      newCol = $(parent).next()[0];
    } else {
      $(parent).append(column);
      newCol = $(parent).children("td")[0];
    }
    return newCol;
  };

  Slider.prototype.splitCol = function(parent) {
    var existing, half, id, newcol, totalSize;
    this._deactivateSlider();
    existing = $(parent).parent("td");
    totalSize = existing.css("width");
    newcol = $(addCol(existing[0], {
      "background": "grey"
    }));
    half = totalSize.match(/[\d\.]+/) * 0.5;
    existing.css("width", half + "px");
    newcol.css("width", half + "px");
    id = this._uuid();
    newcol.attr("id", id);
    return this._activateSlider();
  };

  Slider.prototype.removeCol = function(parent) {
    var half, id, next, prev;
    this._deactivateSlider();
    parent = $(parent).parent("td");
    id = parent.attr("id");
    half = $(parent).css("width").match(/[\d\.]+/) * 0.5;
    prev = $(parent).prev();
    next = $(parent).next();
    $(parent).remove();
    delete this.colData[id];
    prev.css("width", prev.css("width") + (half + "px"));
    next.css("width", next.css("width") + (half + "px"));
    return this._activateSlider();
  };

  Slider.prototype._uuid = function() {
    var id;
    id = _.uniqueId("shot_");
    if (_.findKey(this.colData, id)) {
      id = this.uuid();
    }
    this.colData[id] = {};
    return id;
  };

  Slider.prototype._activateSlider = function() {
    return this.slider.colResizable({
      liveDrag: true,
      fixed: true,
      gripInnerHtml: this.dragHandles,
      draggingClass: "grip-drag",
      onDrag: this._scrubVideo,
      onResize: this._updateData,
      minWidth: 8
    });
  };

  Slider.prototype._deactivateSlider = function() {
    return this.slider.colResizable({
      disable: true
    });
  };

  return Slider;

})();
