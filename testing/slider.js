// Generated by CoffeeScript 1.9.1
var Slider,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Slider = (function() {
  Slider.prototype.sliderLocation = {};

  Slider.prototype.dragHandles = "<div class='grip'></div>";

  Slider.prototype.colMargin = 10;

  Slider.prototype.colData = {};

  Slider.prototype.colSorted = [];

  Slider.prototype.events = {
    "scrub": [],
    "update": []
  };

  function Slider(slider, colData) {
    var id, sliderInternal;
    this.colData = colData;
    this._deactivateSlider = bind(this._deactivateSlider, this);
    this._activateSlider = bind(this._activateSlider, this);
    this._uuid = bind(this._uuid, this);
    this.removeCol = bind(this.removeCol, this);
    this.splitCol = bind(this.splitCol, this);
    this._rebuildCols = bind(this._rebuildCols, this);
    this._updateData = bind(this._updateData, this);
    this._scrubVideo = bind(this._scrubVideo, this);
    this.addEvent = bind(this.addEvent, this);
    if (!this.colData) {
      id = this._uuid();
      this.colData = {
        id: {
          CLASS: "default",
          CSS: {
            background: "grey"
          },
          CONTENT: "This is a default column. Check log for structure",
          RANGE: [0, 1]
        }
      };
      console.log(this.colData);
    }
    this.slider = $("<table><tr></tr></table>").appendTo($(slider));
    sliderInternal = this.slider.find("tr");
    this.sliderLocation = this.slider.offset();
    this.sliderLocation.width = this.slider.width();
    this._rebuildCols();
  }

  Slider.prototype.addEvent = function(name, callback) {
    if (_.isFunction(callback)) {
      return this.events[name].push(callback);
    }
  };

  Slider.prototype._scrubVideo = function(e) {
    var i, len, percent, ref, results, run;
    percent = (e.pageX - this.sliderLocation.left) / this.sliderLocation.width;
    if (percent > 1) {
      percent = 1;
    }
    if (percent < 0) {
      percent = 0;
    }
    ref = this.events["scrub"];
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      run = ref[i];
      results.push(run(percent));
    }
    return results;
  };

  Slider.prototype._updateData = function(e) {
    var i, len, ref, results, run;
    this.slider.find("td").each((function(_this) {
      return function(index, el) {
        var end, id, start;
        id = $(el).attr("id");
        start = $(el).offset().left - _this.sliderLocation.left;
        end = ($(el).width() + start) / _this.sliderLocation.width;
        if (start) {
          start = start / _this.sliderLocation.width;
        }
        if (start < 0) {
          start = 0;
        }
        if (end > 1) {
          end = 1;
        }
        return _this.colData[id].RANGE = [start, end];
      };
    })(this));
    ref = this.events["update"];
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      run = ref[i];
      results.push(run(this.colData));
    }
    return results;
  };

  Slider.prototype._rebuildCols = function() {
    var column, i, id, len, margin, ref, sliderInternal, sort;
    this._deactivateSlider();
    sliderInternal = this.slider.find("tr");
    sliderInternal.html("");
    margin = this.colMargin / this.sliderLocation.width;
    this.colSorted = [];
    sort = (function(_this) {
      return function(lastIndex) {
        var key, ref, ref1, results, val;
        ref = _this.colData;
        results = [];
        for (key in ref) {
          val = ref[key];
          if ((lastIndex <= (ref1 = val.RANGE[0]) && ref1 < (lastIndex + margin))) {
            _this.colSorted.push(key);
            results.push(sort(val.RANGE[1]));
          } else {
            results.push(void 0);
          }
        }
        return results;
      };
    })(this);
    sort(0);
    ref = this.colSorted;
    for (i = 0, len = ref.length; i < len; i++) {
      id = ref[i];
      column = $("<td></td>").addClass(data[id].CLASS).css(data[id].CSS).html(data[id].CONTENT).attr("id", id).width((data[id].RANGE[1] - data[id].RANGE[0]) * this.sliderLocation.width);
      sliderInternal.append(column);
    }
    return this._activateSlider();
  };

  Slider.prototype.splitCol = function(parent, data) {
    var baseRange, col, id, multiplier, previous, segment;
    if (typeof parent === "object") {
      parent = parent.attr("id");
    }
    multiplier = 0.5 / _.size(data);
    baseRange = this.colData[parent].RANGE[1] - this.colData[parent].RANGE[0];
    segment = baseRange * multiplier;
    previous = this.colData[parent].RANGE[0] + segment;
    this.colData[parent].RANGE[1] = previous;
    for (id in data) {
      col = data[id];
      col.RANGE = [];
      col.RANGE.push(previous);
      previous = previous + segment;
      col.RANGE.push(previous);
      this.colData[id] = col;
    }
    return this._rebuildCols();
  };

  Slider.prototype.removeCol = function(id) {
    if (typeof id === "object") {
      id = id.attr("id");
    }
    delete this.colData[id];
    return this._rebuildCols();
  };

  Slider.prototype._uuid = function() {
    var id;
    id = _.uniqueId("shot_");
    if (_.findKey(this.colData, id)) {
      id = this.uuid();
    }
    this.colData[id] = {};
    return id;
  };

  Slider.prototype._activateSlider = function() {
    return this.slider.colResizable({
      liveDrag: true,
      fixed: true,
      gripInnerHtml: this.dragHandles,
      draggingClass: "grip-drag",
      onDrag: this._scrubVideo,
      onResize: this._updateData,
      minWidth: this.colMargin
    });
  };

  Slider.prototype._deactivateSlider = function() {
    return this.slider.colResizable({
      disable: true
    });
  };

  return Slider;

})();
